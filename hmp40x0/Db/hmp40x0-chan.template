record(mbbiDirect, "$(P)$(DEV):Chan$(CHAN):Stat") {
   field (DESC, "HPM status register")
   field (DTYP, "stream")
   field (INP, "@hmp40x0.proto get_stat($(CHAN)) $(PORT)")
   field (PINI, "YES")
   field (SCAN, "1 second")
   field (FLNK, "fanoutrecChan$(CHAN)")
}


record(fanout,"fanoutrecChan$(CHAN)") {
   field (LNK0,"$(P)$(DEV):Chan$(CHAN):VoltMode.PROC")
   field (LNK1,"$(P)$(DEV):Chan$(CHAN):CurrMode.PROC")
   field (LNK2,"$(P)$(DEV):Chan$(CHAN):TempOver.PROC")
   field (LNK3,"$(P)$(DEV):Chan$(CHAN):OvpTrip.PROC")
   field (LNK4,"$(P)$(DEV):Chan$(CHAN):FuseTrip.PROC")
}

record(bi, "$(P)$(DEV):Chan$(CHAN):CurrMode") {
   field (DESC, "HPM Current Mode")
   field (INP, "$(P)$(DEV):Chan$(CHAN):Stat.B0")
   field (SCAN, "Passive")
}

record(bi, "$(P)$(DEV):Chan$(CHAN):VoltMode") {
   field (DESC, "HPM Volt Mode")
   field (INP, "$(P)$(DEV):Chan$(CHAN):Stat.B1")
   field (SCAN, "Passive")
}


record(bi, "$(P)$(DEV):Chan$(CHAN):TempOver") {
   field (DESC, "HPM Temperature overrange")
   field (INP, "$(P)$(DEV):Chan$(CHAN):Stat.B4")
   field (SCAN, "Passive")
   field (OSV, "MAJOR")
}

record(bi, "$(P)$(DEV):Chan$(CHAN):OvpTrip") {
   field (DESC, "HPM Over voltage protection trip")
   field (INP, "$(P)$(DEV):Chan$(CHAN):Stat.B9")
   field (SCAN, "Passive")
   field (OSV, "MAJOR")
}

record(bi, "$(P)$(DEV):Chan$(CHAN):FuseTrip") {
   field (DESC, "HPM Fuse trip")
   field (INP, "$(P)$(DEV):Chan$(CHAN):Stat.B10")
   field (SCAN, "Passive")
   field (OSV, "MAJOR")
}

record(ai, "$(P)$(DEV):Chan$(CHAN):RdSetVolt") {
   field (DESC, "HPM read set voltage")
   field (DTYP, "stream")
   field (INP, "@hmp40x0.proto get_set_val($(CHAN),VOLT) $(PORT)")
   field (EGU, "V")
   field (PINI, "YES")
   field (SCAN, "1 second")
   field (FLNK, "$(P)$(DEV):Chan$(CHAN):RdSetCurr")
}

record(ai, "$(P)$(DEV):Chan$(CHAN):RdMeasVolt") {
   field (DESC, "HPM read meas voltage")
   field (DTYP, "stream")
   field (INP, "@hmp40x0.proto get_meas_val($(CHAN),VOLT) $(PORT)")
   field (EGU, "V")
   field (PINI, "YES")
   field (SCAN, "1 second")
   field (FLNK, "$(P)$(DEV):Chan$(CHAN):RdMeasCurr")
}

record(ai, "$(P)$(DEV):Chan$(CHAN):RdSetCurr") {
   field (DESC, "HPM read set current")
   field (DTYP, "stream")
   field (INP, "@hmp40x0.proto get_set_val($(CHAN),CURR) $(PORT)")
   field (EGU, "A")
   field (FLNK, "$(P)$(DEV):Chan$(CHAN):CalcSetPow")
}

record(ai, "$(P)$(DEV):Chan$(CHAN):RdMeasCurr") {
   field (DESC, "HPM read meas current")
   field (DTYP, "stream")
   field (INP, "@hmp40x0.proto get_meas_val($(CHAN),CURR) $(PORT)")
   field (EGU, "A")
   field (FLNK, "$(P)$(DEV):Chan$(CHAN):CalcMeasPow")
}

record(calc, "$(P)$(DEV):Chan$(CHAN):CalcMeasPow") {
   field (DESC, "HPM calculated power from meas val")
   field (INPA, "$(P)$(DEV):Chan$(CHAN):RdMeasVolt")
   field (INPB, "$(P)$(DEV):Chan$(CHAN):RdMeasCurr")
   field (CALC, "A*B")
   field (EGU, "W")
}

record(calc, "$(P)$(DEV):Chan$(CHAN):CalcSetPow") {
   field (DESC, "HPM calculated power from set values")
   field (INPA, "$(P)$(DEV):Chan$(CHAN):RdSetVolt")
   field (INPB, "$(P)$(DEV):Chan$(CHAN):RdSetCurr")
   field (CALC, "A*B")
   field (EGU, "W")
}

record(ao, "$(P)$(DEV):Chan$(CHAN):SetVolt") {
   field (DESC, "HPM set voltage")
   field (DTYP, "stream")
   field (OUT, "@hmp40x0.proto set_val($(CHAN),VOLT) $(PORT)")
   field (EGU, "V")
   #field (PINI, "YES")
   #field (SCAN, "1 second")
   #field (FLNK, "$(P)$(DEV):Chan$(CHAN):RdSetCurr")
}

record(ao, "$(P)$(DEV):Chan$(CHAN):SetCurr") {
   field (DESC, "HPM set current")
   field (DTYP, "stream")
   field (OUT, "@hmp40x0.proto set_val($(CHAN),CURR) $(PORT)")
   field (EGU, "A")
}

record(ao, "$(P)$(DEV):Chan$(CHAN):SetOVP") {
   field (DESC, "HPM set overprotection voltage")
   field (DTYP, "stream")
   field (OUT, "@hmp40x0.proto set_val($(CHAN),volt:prot) $(PORT)")
   field (EGU, "V")
}

record(ai, "$(P)$(DEV):Chan$(CHAN):RdOVP") {
   field (DESC, "HPM read overprotection voltage")
   field (DTYP, "stream")
   field (INP, "@hmp40x0.proto get_set_val($(CHAN),volt:prot) $(PORT)")
   field (EGU, "V")
   field (PINI, "YES")
   field (SCAN, "1 second")
}

record(bo, "$(P)$(DEV):Chan$(CHAN):setOVPCle") {
   field (DESC, "HPM reset a tripped OVP")
   field (UDFS, "NO_ALARM")
   field (DTYP, "stream")
   field (OUT, "@hmp40x0.proto set($(CHAN),volt:prot:cle) $(PORT)")
}

record(bo, "$(P)$(DEV):Chan$(CHAN):setOVPMode") {
   field (DESC, "HPM set OVP mode")
   field (UDFS, "NO_ALARM")
   field (DTYP, "stream")
   field (OUT, "@hmp40x0.proto set_ovp_mode($(CHAN)) $(PORT)")
   field (ONAM, "protected")
   field (ZNAM, "measured")
}

record(bi, "$(P)$(DEV):Chan$(CHAN):getOVPMode") {
   field (DESC, "HPM get OVP mode")
   field (DTYP, "stream")
   field (INP, "@hmp40x0.proto get_ovp_mode($(CHAN)) $(PORT)")
   field (ONAM, "protected")
   field (ZNAM, "measured")
   field (PINI, "YES")
   field (SCAN, "1 second")
} 

record(bo, "$(P)$(DEV):Chan$(CHAN):cActive") {
   field (DESC, "HPM activate = 1, deactivate = 0")
   field (DTYP, "stream")
   field (OUT, "@hmp40x0.proto set_active($(CHAN)) $(PORT)")
}

record(bi, "$(P)$(DEV):Chan$(CHAN):sActive") {
   field (DESC, "HPM active = 1, off = 0")
   field (DTYP, "stream")
   field (INP, "@hmp40x0.proto get_active($(CHAN)) $(PORT)")
#   field (PINI, "YES")
   field (SCAN, "1 second")
}


